{"version":3,"sources":["components/Login.js","components/Table.js","components/ItemList.js","services/AuthService.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","SignIn","props","classes","useState","email","password","isLoggedIn","state","onClick","onLoginChange","onPasswordChange","Container","component","maxWidth","CssBaseline","className","noValidate","TextField","variant","required","fullWidth","id","label","name","autoComplete","autoFocus","value","onChange","event","type","Button","color","Grid","container","Spinner","root","overflowX","table","minWidth","ItemTable","newrows","undefined","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","reverse","slice","AddButton","OnClick","LogOutButton","onLogoutClick","ItemList","rows","newitem","onInputChange","REST_API_URL","AUTH_OPTIONS","credentials","mode","bearer","authenticate","a","JSON","stringify","username","fetch","method","headers","Accept","then","resp","forEach","header","exec","retrieveItems","Authorization","response","json","addItem","item","token","items","App","setState","target","OnAddClick","catch","error","console","newItems","window","confirm","from","to","exact","path","render","preventDefault","alert","onClickSignIn","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8129a8a6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nexport default function SignIn(props) {\n  const classes = useStyles();\n\n  const [state, setState] = useState({\n    email: \"\",\n    password: \"\",\n    isLoggedIn: false\n  });\n\n  const { onClick, onLoginChange, onPasswordChange, email, password } = props;\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Login\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={email}\n            onChange={event => onLoginChange(event)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Hasło\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={event => onPasswordChange(event)}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={event => onClick(event, state.email, state.password)}\n          >\n            Zaloguj Się\n          </Button>\n          <Grid container></Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst Spinner = () => {\n  return <p>Nie udało się załadować listy.</p>;\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing(1),\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 650\n  }\n}));\n\nexport default function ItemTable(props) {\n  const { newrows } = props;\n  const classes = useStyles();\n\n  return newrows !== undefined ? (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Nr</TableCell>\n            <TableCell>Wiadomość</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {newrows\n            .map(row => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\" width=\"20%\">\n                  {row.id}\n                </TableCell>\n                <TableCell>{row.name}</TableCell>\n              </TableRow>\n            ))\n            .reverse()\n            .slice(0, 10)}\n        </TableBody>\n      </Table>\n    </Paper>\n  ) : (\n    <Spinner />\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ItemTable from \"../components/Table\";\n\nfunction AddButton(props) {\n    const { OnClick } = props;\n    return (\n      <Button variant=\"contained\" color=\"primary\" onClick={() => OnClick()}>\n        Dodaj\n      </Button>\n    );\n  }\n  \n  function LogOutButton(props) {\n    const { onLogoutClick } = props;\n    return (\n      <Button variant=\"contained\" color=\"primary\" onClick={() => onLogoutClick()}>\n        Wyloguj\n      </Button>\n    );\n  }\n\nexport const ItemList = props => {\n    const { rows, OnClick, onLogoutClick, newitem, onInputChange } = props;\n\n    return (\n      <div>\n        <ItemTable newrows={rows} />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"newelement\"\n          label=\"Dodaj nowy element\"\n          name=\"newelement\"\n          autoComplete=\"email\"\n          autoFocus\n          value={newitem}\n          onChange={event => onInputChange(event)}\n        />\n        <AddButton OnClick={() => OnClick()} />\n        <LogOutButton onLogoutClick={onLogoutClick} />\n      </div>\n    );\n  };","const REST_API_URL = \"http://frontend-recruitment.one2tribe.pl:8080\";\nconst AUTH_OPTIONS = {\n  credentials: \"include\",\n  mode: \"cors\"\n};\n\nlet bearer = \"\";\n\nexport const authenticate = async () => {\n  const body = JSON.stringify({\n    username: \"YNAPEyJk\",\n    password: \"ylYJDgFmnAIs\"\n  });\n\n  await fetch(`${REST_API_URL}/api/authenticate`, {\n    method: \"post\",\n    ...AUTH_OPTIONS,\n    body,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  }).then(resp => {\n    resp.headers.forEach(header => {\n      const bearerRegex = /Bearer/;\n\n      if (bearerRegex.exec(header)) {\n        bearer = header;\n      } else {\n        return;\n      }\n    });\n  });\n\n  return bearer;\n};\n\nexport const retrieveItems = async bearer => {\n  const response = await fetch(`${REST_API_URL}/api/v1/item`, {\n    ...AUTH_OPTIONS,\n    headers: {\n      Authorization: bearer,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  });\n\n  return response.json();\n};\n\nexport const addItem = async (item, bearer) => {\n  const response = await fetch(`${REST_API_URL}/api/v1/item`, {\n    method: \"post\",\n    ...AUTH_OPTIONS,\n    body: JSON.stringify(item),\n    headers: {\n      Authorization: bearer,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  });\n\n  return response;\n};\n\nexport const main = async () => {\n  const token = await authenticate();\n  const items = await retrieveItems(bearer);\n\n  return { items, token };\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login\";\nimport {ItemList} from \"./components/ItemList\";\nimport {\n  retrieveItems,\n  addItem,\n  main\n} from \"./services/AuthService\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nfunction App() {\n  const [state, setState] = useState({\n    email: \"\",\n    password: \"\",\n    isLoggedIn: false,\n    token: \"\"\n  });\n\n  function onClickSignIn(event, email, password) {\n    event.preventDefault();\n\n    if (state.email === \"YNAPEyJk\" && state.password === \"ylYJDgFmnAIs\") {\n      main()\n        .catch(error => console.error(error))\n        .then(response =>\n          setState({\n            email,\n            password,\n            items: response.items,\n            token: response.token,\n            isLoggedIn: true\n          })\n        );\n    } else if (state.email === \"\") {\n      return alert(\"Proszę podać login\");\n    } else if (state.password === \"\") {\n      return alert(\"Proszę podać hasło\");\n    } else {\n      return alert(\"Nieprawidłowy login lub hasło\");\n    }\n  }\n\n  function onLoginChange(event) {\n    setState({\n      ...state,\n      email: event.target.value\n    });\n  }\n\n  function onPasswordChange(event) {\n    setState({\n      ...state,\n      password: event.target.value\n    });\n  }\n\n  function onInputChange(event) {\n    setState({\n      ...state,\n      newitem: event.target.value\n    });\n  }\n\n  const OnAddClick = () => {\n    const name = state.newitem;\n    const item = { name };\n\n    addItem(item, state.token)\n      .catch(error => console.error(error))\n      .then(() => retrieveItems(state.token))\n      .then(newItems => setState({ ...state, newitem: \"\", items: newItems }));\n  };\n\n  const onLogoutClick = () => {\n    if (window.confirm(\"Czy na pewno chcesz się wylogować?\")) {\n      setState({\n        ...state,\n        items: [],\n        isLoggedIn: false\n      });\n    }\n  };\n\n  const UserLogin = () => {\n    return (\n      <div>\n        <Login\n          onClick={(event, email, password) =>\n            onClickSignIn(event, email, password)\n          }\n          onLoginChange={event => onLoginChange(event)}\n          onPasswordChange={event => onPasswordChange(event)}\n          email={state.email}\n          password={state.password}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Router>\n        <div>\n          <Switch>\n            {state.isLoggedIn ? (\n              <>\n                <Redirect from=\"/\" to=\"/items\" />\n                <Route\n                  exact\n                  path=\"/items\"\n                  render={props => (\n                    <ItemList\n                      {...props}\n                      OnClick={OnAddClick}\n                      rows={state.items}\n                      onLogoutClick={onLogoutClick}\n                      newitem={state.newitem}\n                      onInputChange={onInputChange}\n                    />\n                  )}\n                />\n              </>\n            ) : (\n              <>\n                <Redirect from=\"/items\" to=\"/\" />\n                <Route exact path=\"/\" component={UserLogin} />\n              </>\n            )}\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}